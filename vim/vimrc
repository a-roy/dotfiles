let s:Unix = has("unix")
let s:Linux = system("uname") == "Linux\n"
let s:MSWindows = has("win32") || has("win64")
let s:Cygwin = has("win32unix")
let s:Nvim = has("nvim")
let s:WSL = s:Linux && strridx($PATH, "Windows/System32") >= 0

let vimdir = split(&rtp, ',')[0]

if s:Nvim
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
endif

set nocompatible

let mapleader=','
let maplocalleader=' '

" Plugins {{{
if empty(glob(vimdir . '/autoload/plug.vim'))
  execute '!curl -fLo ' . vimdir . '/autoload/plug.vim --create-dirs ' .
    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin(vimdir . '/plugged')

" GUI {{{
Plug 'jonathanfilip/vim-lucius'
Plug 'iissnan/tangoX'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
  if s:Linux && !s:WSL
    let g:airline_powerline_fonts = 1
  else
    let g:airline_powerline_fonts = 0
  endif
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tagbar#enabled = 1
  " Some airline themes copy colors from the active colorscheme:
  " hybrid, lucius, monochrome, tomorrow, zenburn
  "let g:airline_theme = "zenburn"
  let g:airline_theme = "lucius"
  if s:WSL
    call airline#parts#define_accent('mode', 'none')
  endif
" }}}
" General Editing {{{
Plug 'xolox/vim-misc'
Plug 'xolox/vim-shell'
  " :h shell.txt
  map  <C-CR> :Open<CR>
  let g:shell_fullscreen_items='mT'
  let g:shell_fullscreen_always_on_top = 0
Plug 'Lokaltog/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'myusuf3/numbers.vim'
Plug 'Konfekt/FastFold'
Plug 'sjl/gundo.vim'
  nmap <Leader>u :GundoToggle<CR>
if s:Nvim
  Plug 'Shougo/deoplete.nvim'
    let g:deoplete#enable_at_startup = 1
else
  Plug 'Shougo/neocomplete.vim'
    " :h neocomplete-variables
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.c =
      \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
    let g:neocomplete#force_omni_input_patterns.cpp =
      \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
endif
  " :h neocomplete-examples
  augroup complete_fn
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  augroup END
Plug 'justmao945/vim-clang'
  " :h clang-commands
  augroup clang_cmd
    autocmd!
    autocmd FileType c,cpp map <buffer> <silent> <Leader>cc :ClangCloseWindow<CR>
    autocmd FileType c,cpp map <buffer> <silent> <Leader>cs :ClangSyntaxCheck<CR>
  augroup END
  " :h clang-variables
  let g:clang_auto = 0
  let g:clang_c_completeopt = 'menuone'
  let g:clang_cpp_completeopt = 'menuone'
  let g:clang_cpp_options = '-std=c++11 -x c++'
  let g:clang_verbose_pmenu = 1
  let g:clang_enable_format_command = 0
Plug 'rhysd/vim-clang-format'
" }}}
" File Management {{{
Plug 'Shougo/vimproc.vim'
Plug 'vimwiki/vimwiki'
if s:Linux
  Plug 'junegunn/fzf', { 'dir': '~/.fzf' }
  Plug 'junegunn/fzf.vim'
  map <Leader>ff :Files<CR>
  map <Leader>fb :Buffers<CR>
" TODO investigate alternative for Windows (fzf/unite/denite)
endif
" }}}
" Version Control {{{
Plug 'tpope/vim-fugitive'
" }}}
" Languages {{{
Plug 'sheerun/vim-polyglot'
  " TODO polyglot's latex plugin is LaTeX-Box, re-enable if you need it
  let g:polyglot_disabled = ['latex']
" C/C++
"Plug 'refactor'
" LaTeX
" TODO Check that vimtex works in Windows and WSL
" vimtex author on LaTeX plugins: https://vi.stackexchange.com/a/5747
Plug 'lervag/vimtex'
  " :h vimtex-options
  if s:Linux && has("X11")
    let g:vimtex_view_method = 'zathura'
  elseif s:WSL
    " TODO TEST THIS
    let g:vimtex_view_general_viewer = 'cmd.exe /c start'
  endif
" Markdown
if s:Nvim || v:version >= 800
  function! BuildComposer(info)
    if a:info.status != 'unchanged' || a:info.force
      if has('nvim')
        !cargo build --release
      else
        !cargo build --release --no-default-features --features json-rpc
      endif
    endif
  endfunction
  Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
    let g:markdown_composer_browser = 'qutebrowser --target window'
endif
" }}}
" General coding {{{
Plug 'majutsushi/tagbar'
  nmap <Leader>t :TagbarToggle<CR>
  " :h tagbar-configuration
  if s:MSWindows
    let g:tagbar_ctags_bin = 'C:\ctags58\ctags.exe'
  endif

  let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : '~/markdown2ctags/markdown2ctags.py',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
      \ 's:sections',
      \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
      \ 's' : 'section',
    \ },
    \ 'sort': 0,
  \ }
if s:Nvim || v:version >= 800
  Plug 'w0rp/ale'
else
  Plug 'scrooloose/syntastic'
    let g:syntastic_cpp_checkers = ['gcc']
    let g:syntastic_cpp_check_header = 1
    let g:syntastic_cpp_auto_refresh_includes = 1
    let g:syntastic_cpp_compiler = 'clang++'
endif
" }}}

call plug#end()
" }}}
" General configuration {{{
" Global settings {{{
set number relativenumber
set ruler
set hlsearch
set laststatus=2
set noshowmode
set title
set textwidth=80
execute "set colorcolumn=+" . join(range(1,255), ',+')
set tabstop=4 expandtab shiftwidth=4 softtabstop=4
set foldmethod=syntax foldminlines=4
set backspace=indent,eol,start
set hidden
" }}}
" Terminal {{{
" Cusor shapes in terminal
" 1 or 0 -> blinking block
" 2 -> solid block
" 3 -> blinking underscore
" 4 -> solid underscore
" 5 -> blinking vertical bar
" 6 -> solid vertical bar
if s:Cygwin
  let &t_ti .= "\e[1 q"
  let &t_SI .= "\e[5 q"
  let &t_SR .= "\e[3 q"
  let &t_EI .= "\e[1 q"
  let &t_te .= "\e[0 q"
elseif &term =~ '^xterm\|rxvt'
  let &t_SI .= "\<Esc>[5 q"
  let &t_SR .= "\<Esc>[3 q"
  let &t_EI .= "\<Esc>[1 q"
endif
if !has("gui_running")
  set ttimeoutlen=0
  set mouse=a
endif
" }}}
" Colors {{{
if has("termguicolors")
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  colorscheme tangoX
  highlight ColorColumn guibg=WhiteSmoke
else
  colorscheme lucius
  LuciusWhite
endif
" }}}
" Ex commands {{{
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis |
    \ windmcd p | diffthis
endif
" }}}
" Autocommands {{{
" Open folds when opening a file
augroup folding
  autocmd!
  autocmd FileType * normal! zR
augroup END
" doxygen comments for C/C++
augroup syntax_mod
  autocmd!
  autocmd FileType c,cpp set comments^=://!
augroup END

if s:Nvim
  augroup vimrc_aucmd
    autocmd!
    autocmd CursorHold * rshada|wshada
  augroup END
endif
" }}}
" Keybindings {{{
" Plugin bindings
" Actual mappings appear near plugin declarations
" :h surround-mappings
" :h vimtex-default-mappings
" cs   - vim-surround and vimtex
" ds   - vim-surround and vimtex
" ts   - vimtex
" ys   - vim-surround
" K    - vimtex
" [    - vimtex
" ]    - vimtex
" ,c   - clang
" ,f   - fzf or unite
" ,t   - tagbar
" ,u   - gundo
" <s>l - vimtex
" <F7> - vimtex

map <C-Z> <Nop>
map gb :bnext<CR>
map gB :bprevious<CR>

inoremap <C-B> <Left>
inoremap <C-F> <Right>
inoremap <C-D> <Del>
" }}}
" }}}

" vim: ts=2 sts=2 sw=2 foldmethod=marker foldminlines=1 foldlevel=0
