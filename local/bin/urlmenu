#!/usr/bin/python

import argparse
import re
import subprocess as proc
import os
import sys
import shlex

handlers = [
    (re.compile(r'magnet:.*'), 'magnet'),
    (re.compile(r'file://.*\.pdf'), 'zathura'),
    (re.compile(r'https?://(?:[im]\.)?imgur.com/.+'), 'imgur'),
    (re.compile(r'(.*\.(jpg|png)(:\w+)?(\?\w*)?|'
                'https://i.reddituploads.com/.*)'), 'feh'),
    (re.compile(r'.*\.(gifv?|webm|mkv)|https?://gfycat\.com/\w+|'
            'https?://streamable\.com/\w+|'
            'https?://www\.facebook\.com/\w+/videos/\d+/'), 'mpv'),
    (re.compile(r'https?://.*youtube\.com/watch\?.+|https?://youtu\.be/.+'),
     'mpv'),
    (re.compile(r'https?://v\.redd\.it/\w+'), 'mpv'),
    (re.compile(r'.*'), 'qutebrowser'),
    (re.compile(r'.*'), 'qutebrowser --target window'),
    (re.compile(r'.*'), 'copy'),
]

# rofi custom command 1 (Alt+1)
fix_mkd = 10

def run_menu(url):
    returncode = fix_mkd
    while returncode == fix_mkd:
        items = []
        for exp, cmd in handlers:
            if exp.fullmatch(url):
                items.append(cmd)

        if len(items) == 1:
            output = items[0]
            break
        result = proc.run(
                ['rofi', '-dmenu', '-p', 'Open with:', '-mesg', url],
                input='\n'.join(items).encode(), stdout=proc.PIPE)
        returncode = result.returncode
        if result.returncode == fix_mkd:
            url = url.rsplit(')', 1)[0]
        output = result.stdout.decode().rstrip()
    if output:
        cmd = shlex.split(output)
        cmd.append(url)
        try:
            proc.run(cmd, stdin=proc.DEVNULL, stdout=proc.DEVNULL,
                     stderr=proc.DEVNULL, check=True)
        except proc.CalledProcessError:
            proc.run(['notify-send', 'URL ({}) loading failed'.format(url)])

def detach():
    # do the UNIX double-fork magic, see Stevens' "Advanced
    # Programming in the UNIX Environment" for details (ISBN 0201563177)
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError as e:
        print("fork #1 failed: %d (%s)" % (e.errno, e.strerror), file=sys.stderr)
        sys.exit(1)

    # decouple from parent environment
    os.chdir("/")
    os.setsid()
    os.umask(0)

    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent, print eventual PID before
            #print("Daemon PID %d" % pid)
            sys.exit(0)
    except OSError as e:
        print("fork #2 failed: %d (%s)" % (e.errno, e.strerror), file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('url', nargs=1)
    args = parser.parse_args()
    url = args.url[0]

    detach()
    run_menu(url)
